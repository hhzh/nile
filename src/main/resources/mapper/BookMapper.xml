<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mapper.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nile.dao.BookDao">

    <resultMap id="authorResult" type="Author" extends="com.nile.dao.AuthorDao.authorResult"/>

    <resultMap id="publisherResult" type="Publisher" extends="com.nile.dao.PublisherDao.publisherResult"/>

    <resultMap id="categoryResult" type="Category" extends="com.nile.dao.CategoryDao.categoryResult"/>

    <resultMap id="bookResult" type="Book">
        <id column="book_id" property="id"/>
        <result column="book_name" property="name"/>
        <result column="book_price" property="price"/>

        <association property="publisher" resultMap="publisherResult"/>
        <collection property="authors" ofType="Author" resultMap="authorResult"/>
        <collection property="categories" ofType="Category" resultMap="categoryResult"/>
    </resultMap>

    <sql id="authorColumns">
        <include refid="com.nile.dao.AuthorDao.authorColumns"/>
    </sql>

    <sql id="categoryColumns">
        <include refid="com.nile.dao.CategoryDao.categoryColumns"/>
    </sql>

    <sql id="publisherColumns">
        <include refid="com.nile.dao.PublisherDao.publisherColumns"/>
    </sql>

    <sql id="bookColumns">
        bo.id as book_id,
        bo.name as book_name,
        bo.price as book_price
    </sql>

    <sql id="bookFilter">
        <if test="id !=null">
            id=#{id}
        </if>
        <if test="name!=null">
            and name=#{name}
        </if>
    </sql>

    <insert id="insertBook" parameterType="Book">
        INSERT INTO book (
            id, name, price, author_id, category_id, publisher_id)
        VALUES (
            #{id}, #{name}, #{price}, #{author.id}, #{category.id}, #{publisher.id}
        )
    </insert>
    <update id="updateBook">
        UPDATE book SET name=#{name},price=#{price} where id=#{id}
    </update>
    <delete id="deleteBook">
        DELETE FROM book WHERE id=#{id}
    </delete>

    <select id="selectBookById" resultMap="bookResult">
        SELECT
            <include refid="bookColumns"/>,
            <include refid="authorColumns"/>,
            <include refid="categoryColumns"/>,
            <include refid="publisherColumns"/>
        FROM book bo
            LEFT JOIN publisher pu ON bo.publisher_id=pu.id
            left join book_author ba on ba.book_id=bo.id
            LEFT JOIN author au ON ba.author_id=au.id
            left join book_category bc on bc.book_id=bo.id
            LEFT JOIN category ca ON bc.category_id=ca.id
        WHERE
            bo.id=#{id}
    </select>
    <select id="selectBookAll" resultMap="bookResult">
        select
            <include refid="bookColumns"/>,
            <include refid="authorColumns"/>,
            <include refid="categoryColumns"/>,
            <include refid="publisherColumns"/>
        from book bo
            LEFT JOIN publisher pu ON bo.publisher_id=pu.id
            left join book_author ba on ba.book_id=bo.id
            LEFT JOIN author au ON ba.author_id=au.id
            left join book_category bc on bc.book_id=bo.id
            LEFT JOIN category ca ON bc.category_id=ca.id
    </select>
    <select id="selectBookByFilter" resultMap="bookResult">
        SELECT
            <include refid="bookColumns"/>,
            <include refid="authorColumns"/>,
            <include refid="categoryColumns"/>,
            <include refid="publisherColumns"/>
        FROM book bo
            LEFT JOIN publisher pu ON bo.publisher_id=pu.id
            left join book_author ba on ba.book_id=bo.id
            LEFT JOIN author au ON ba.author_id=au.id
            left join book_category bc on bc.book_id=bo.id
            LEFT JOIN category ca ON bc.category_id=ca.id
        <where>
            <include refid="bookFilter"/>
        </where>
    </select>
</mapper>